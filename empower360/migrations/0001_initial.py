# Generated by Django 4.2.8 on 2024-06-26 09:53

from django.db import migrations, models
import django.utils.timezone
import empower360.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('text', models.CharField(db_column='text', max_length=300)),
                ('score', models.IntegerField(db_column='score')),
            ],
            options={
                'db_table': 'CR_Choice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('emp_name', models.CharField(db_column='employee_name', max_length=50)),
                ('emp_id', models.IntegerField(db_column='employee_id')),
            ],
            options={
                'db_table': 'CR_Employee',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='title', max_length=150)),
                ('body', models.CharField(db_column='body', max_length=250)),
                ('body_ar', models.CharField(blank=True, db_column='body_ar', max_length=250, null=True)),
                ('type', models.IntegerField(db_column='type')),
            ],
            options={
                'db_table': 'CR_Question',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionLink',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('answer', models.CharField(db_column='answer', max_length=100)),
            ],
            options={
                'db_table': 'CR_Question_Link',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=50)),
                ('status', models.IntegerField(db_column='status')),
            ],
            options={
                'db_table': 'CR_Questionnaire',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[empower360.validators.validate_email_domain])),
                ('full_name', models.CharField(max_length=50)),
                ('company_id', models.IntegerField(unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
